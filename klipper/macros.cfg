# Adds print macros such as start print and end print.
# in cura, as start gcode you can define "START_PRINT" and end gcode "END_PRINT"


######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT.

[gcode_macro START_PRINT]
#variable_BED_TEMP: 60
#variable_EXTRUDER_TEMP: 200
#variable_STANDBY_T_EXTRUDER: 170
gcode:
    {% set T_BED = params.BED_TEMP|default(60)|float %}
    {% set T_EXTRUDER = params.EXTRUDER_TEMP|default(200)|float %}
    {% set STANDBY_T_EXTRUDER = params.STANDBY_EXTRUDER_TEMP|default(160)|float %}    
    M117 Homing
    # Use absolute coordinates
    G90
    # Reset Pressure Advance to 0, will be adjusted later in gcode based on material settings from cura
    #M900 K0
	# Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Use the bed mesh
    #G29
    BED_MESH_PROFILE LOAD=cr10v2
    # Move the nozzle near the bed
    G1 X15 Y20 Z5 F6000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300    
    M117 Waiting for temperature
    # Start bed and extruder heating and continue
    M104 S{STANDBY_T_EXTRUDER}
    M140 S{T_BED}
    {% if printer.heater_bed.temperature < T_BED|float*0.85 %}
        M190 S{T_BED|float*0.85} # wait till 0.85 of bed temp is reached, then continue  
    {% endif %}
    
    M140 S{T_BED} 
    M104 S170
    M190 S{T_BED}
	M109 S{T_EXTRUDER}
    
    # Prime line
    PURGE
    M117 Printing...

[gcode_macro END_PRINT]
gcode:
    M117 Done printing :)
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 5mm
    G1 Z5 F3000	
    # absolute xy 
    G90
    G1 X5 Y295 F2000
    # Turn off hotend, heated bed and fan
    M104 S0
    M140 S0
	M106 S0
    # disable steppers
    M84
    BED_MESH_CLEAR

# prime the nozzle 
[gcode_macro PURGE]
gcode: 
    M117 Prime Line
    G92 E0 ;Reset Extruder
    # move z axis 
    G1 Z2.0 F3000 ;Move Z Axis up
    # move to prime position 
    G1 X2 Y30 Z0.28 F5000.0 ;Move to start position
    G1 X2 Y200.0 Z0.28 F1500.0 E15 ;Draw the first line
    G1 X2.4 Y200.0 Z0.28 F5000.0 ;Move to side a little
    G1 X2.4 Y50 Z0.28 F1500.0 E30 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 Z2.0 F3000 ;Move Z Axis up
 
# G29 => (1) home all (2) get bed mesh (3) move nozzle to corner so it doesnt ooze on the bed while heating up.
[gcode_macro G29]
gcode:
    G28
    BED_MESH_CALIBRATE
    G0 X0 Y0 Z10 F6000
    BED_MESH_PROFILE save=cr10v2

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1
	
[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1
	


[gcode_macro M900]
gcode:
    {% set K = params.K|default(0)|float %}
    SET_PRESSURE_ADVANCE ADVANCE={K}
	
# Park toolhead
[gcode_macro M125]
gcode:
    SAVE_GCODE_STATE NAME=parking
    M117 Parking toolhead
    G91
    G1 Z10 F600 # move up 10 mm
    G90
    G1 X150 Y10 F4000 # move to park position
    RESTORE_GCODE_STATE NAME=parking

# LOW_TEMP_CHECK checks if there is a setpoint for the  extruder. 
# - If this setpoint is reached, continue. 
# - If not, heat to setpoint.
# - If no setpoint, heat to parameter T (default@200)
[gcode_macro LOW_TEMP_CHECK]
#variable_T: 200
gcode: 
    {% set T = params.T|default(200)|float %}
	{% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            M118 Heating from {printer.extruder.temperature} to {printer.extruder.target}.
            M109 S{printer.extruder.target|float} 
        {% endif %}
    {% else %} # if no setpoint for extruder
        {% if printer.extruder.target < param.T %}  # heat to T.
            M118 No setpoint, heating to {param.T}.
            M109 S{param.T}
        {% endif %}
    {% endif %}
    
# load filament
[gcode_macro M701]
gcode:
    SAVE_GCODE_STATE NAME=loading_filament
    M117 Loading Filament
    M83
    G92 E0.0
    LOW_TEMP_CHECK
    G1 E10 F1500   # Traction lente 10mm @ 25mm/s
    #G1 E200 F2100  # longueur du tube bowden (~430mm) Flying Xtruder with BMG 50:17 (200mm)
	G1 E80 F1200   # longueur de la tete (~65mm) + DD MiniXtruder BMG 50:17 (15mm)
    G1 E50 F600    # purge --> lentement 
    G92 E0.0
    RESTORE_GCODE_STATE NAME=loading_filament
    
# unload filament
[gcode_macro M702]
gcode:
    SAVE_GCODE_STATE NAME=unloading_filament
    M125 # park
    M117 Unloading Filament 
    LOW_TEMP_CHECK
    G91 # set relative
    G1 E3 F100  # preparation retrait en extrudant un peu de filament
    G92 E0.0
	# Tete CR10V2
	#G1 E-15 F1500  # retraction primaire
    #G1 E-55 F1800  # retrait hors tete  
    #G1 E-200 F2100 # longueur du tube bowden (430mm) or for flying Xtruder with BMG 50:17 (200mm) 
	# DD MiniXtruder (hotends.fr)
    G1 E-5 F1500   # retraction primaire
    G1 E-55 F1800  # retrait hors tete  
    G1 E-25 F2100  # MiniXtruder BMG 50:17 (25mm) 
    G92 E0.0
    RESTORE_GCODE_STATE NAME=unloading_filament

# filament change OLD
#[gcode_macro M600]
#gcode:
#    M117 Filament Change
#    M118 Filament Change
#    SAVE_GCODE_STATE NAME=filament_change
#    PAUSE
#    LOW_TEMP_CHECK
#    G91 # relative
#    G1 E-1 F300 # retract 1
#    M125 # park
#    M702 # unload

#    M117 New filament
#    M118 New filament
#    COUNTDOWN TIME=150 MSG="Switch"
#    M701
#    COUNTDOWN TIME=10 MSG="Clean"
#    RESUME
#    M117 Resuming
#    M118 Resuming
#    RESTORE_GCODE_STATE NAME=filament_change
#    M117 Printing..
#    M118 Printing..

######################################################################
# Filament Change - sample-macros.cfg
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(30)|float %}
    {% set Y = params.Y|default(30)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESUME
    RESTORE_GCODE_STATE NAME=M600_state MOVE=1

[gcode_macro COUNTDOWN]
#default_parameter_MSG: "Time: "
#default_parameter_TIME: 10
gcode: 
    {% set TIME = params.TIME|default(10)|int %}
    {% set MSG = params.MSG|default("Time: ") %}
    # countdown 
    {% for s in range(TIME|int, 0, -1) %}
        # dwell 1 second
        G4 P1000
        # echo
        M117 {params.MSG} {s}s
        M118 {params.MSG} {s}s
    {% endfor %}

# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.
[output_pin BEEPER_pin]
pin: PC0
#   ar37 is the default RAMPS/MKS pin.
pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   PWM frequency : 0.001 = 1ms will give a base tone of 1kHz
#   Although not pitch perfect.

[gcode_macro M300]
gcode:
# sample-macros.cfg
# Use a default 1kHz tone if S is omitted.
#    {% set S = params.S|default(1000)|int %}
#    # Use a 10ms duration is P is omitted.
#    {% set P = params.P|default(100)|int %}
#    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
#    G4 P{P}
#    SET_PIN PIN=BEEPER_pin VALUE=0
# /fin sample-macros.cfg
	
    {% set S = params.S|default(1000)|int %} ; S sets the tone frequency
    {% set P = params.P|default(100)|int %} ; P sets the tone duration
    {% set L = 0.5 %} ; L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
    {% if S <= 0 %} ; dont divide through zero
        {% set F = 1 %}
        {% set L = 0 %}
    {% elif S >= 10000 %} ;max frequency set to 10kHz
        {% set F = 0 %}
    {% else %}
        {% set F = 1/S %} ;convert frequency to seconds 
    {% endif %}
    SET_PIN PIN=BEEPER_Pin VALUE={L} CYCLE_TIME={F} ;Play tone
    G4 P{P} ;tone duration
    SET_PIN PIN=BEEPER_Pin VALUE=0
    
# SDCard 'looping' (aka Marlin M808 commands) support
#
# Support SDCard looping
[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}


